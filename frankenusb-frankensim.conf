# -*- mode: Python;-*-
# pylint: disable=invalid-name,missing-module-docstring

# Testing thing we will use for VKB STECS setup

# Simulated 3-position gear lever:
# B4 down -> set lever=up
# B4 up -> set lever=neutral
# B9 down -> set lever=down
# B9 up -> set lever=neutral
# => works!

# Flaps up/down: B48/49

# Rotary turning: seems to generate as many button down/up events as
# the number of notches the rotary turns. Maybe we can just translate
# it to degrees in PSX?
#
# One turn - how many presses?
#
#
# PSX docs: do not send delta events faster than the frame rate (~60
# fps for me), let's limit it to 30 fps? Needed?
#
# Seems to work OK well just sending the button presses as DELTA=1 or -1 :)
#
# Room for improvement, especially for ALT: when turning the wheel
# quickly a large number of events are queued up. We might watch to
# bunch those up and generate larger DELTA events.

CONFIG = {
    'MFG Crosswind V2': {
        'axis motion': {
            2: {
                # Rudder
                'axis type': 'NORMAL',
                'psx variable': 'FltControls',
                'indexes': [2],
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.07, 0.07, 0.0)],  # axis min, axis max, axis replacement value
            },
            0: {
                # Toe Brake Left
                'axis type': 'NORMAL',
                'psx variable': 'Brakes',
                'indexes': [0],
                'psx min': 0,
                'psx max': 1000,
            },
            1: {
                # Toe Brake Left
                'axis type': 'NORMAL',
                'psx variable': 'Brakes',
                'indexes': [1],
                'psx min': 0,
                'psx max': 1000,
            },
        },
    },
    'S-TECS MODERN THROTTLE STANDARD': {
        'axis motion': {
            1: {
                # A throttle axis that uses a button to switch into
                # reverse mode.
                'axis type': 'THROTTLE_WITH_REVERSE_BUTTON',
                'psx variable': 'Tla',
                'axis swap': False,
                # We have a detent to limit forward travel
                'axis min': -1.00,
                'axis max': 0.62,
                # Values to send to PSX at idle and full thrust
                'psx idle': 0,
                'psx full': 5000,
                # PSX values to send at reverse idle and reverse full
                'psx reverse idle': -3000,
                'psx reverse full': -8925,
                # Only possible to toggle reverse when axis is in this range
                'reverse lever unlocked range': (-999.0, -0.9),
                # The PSX engines (1-2) controlled by this throttle
                'engine indexes': [0, 1],
                # The button that triggers reverse
                'reverse button': 8,
		# 'static zones': [(0.62, 1.00, 1.00)],  # axis min, axis max, axis replacement value
            },
            0: {
                'axis type': 'THROTTLE_WITH_REVERSE_BUTTON',
                'psx variable': 'Tla',
                'axis swap': False,
                'axis min': -1.00,
                'axis max': 0.62,
                'psx idle': 0,
                'psx full': 5000,
                'psx reverse idle': -3000,
                'psx reverse full': -8925,
                'reverse lever unlocked range': (-999.0, -0.9),
                'engine indexes': [2, 3],
                'reverse button': 16,
		# 'static zones': [(0.62, 1.00, 1.00)],  # axis min, axis max, axis replacement value
            },
            2: {
                # Speedbrake
                'axis type': 'SPEEDBRAKE',
                'psx variable': 'SpdBrkLever',
				# When the axis value is less than this, the speedbrake is stowed
                'limit stowed': 0.05,
                # Else when the axis value is less than this, the speedbrake is armed
                'limit armed': 0.1,
                # Else when the axis value is greater than this, the speedbrake is full (ground)
                'limit flight upper': 0.9,
                # Else the speedbrake is in the flight range
            },
        },
        'button down': {
            8: {
                'button type': 'REVERSE_LEVER',
                'axis': 1,
            },
            16: {
                'button type': 'REVERSE_LEVER',
                'axis': 0,
            },
            # Toe brake (for taxi use)
            15: {
                'button type': 'SET',
                'psx variable': 'ToeBrakeTogg',
                'value':31,
            },
            7: {
                'button type': 'SET',
                'psx variable': 'ParkBrkLev',
                'value':1,
            },
            # TOGA and A/T off
            22: {
                'button type': 'SET',
                'psx variable': 'ThrustToga',
                'value': 3,

            },
            23: {
                'button type': 'SET',
                'psx variable': 'ThrustDisc',
                'value': 3,
            },
            # MCP SPD
            13: {
                'button type': 'SET',
                'psx variable': 'McpTurnSpd',
                'value': 1,
            },
            14: {
                'button type': 'SET',
                'psx variable': 'McpTurnSpd',
                'value': -1,
            },
            10: {
                'button type': 'SET',
                'psx variable': 'McpPshSpdSel',
                'value': 1,
            },
            # MCP V/S
            11: {
                'button type': 'SET',
                'psx variable': 'McpTurnVs',
                'value': 1,
            },
            12: {
                'button type': 'SET',
                'psx variable': 'McpTurnVs',
                'value': -1,
            },
            17: {
                'button type': 'SET',
                'psx variable': 'McpPshVs',
                'value': 1,
            },
            # MCP ALT
            50: {
                'button type': 'SET',
                'psx variable': 'McpTurnAlt',
                'value': -1,
            },
            51: {
                'button type': 'SET',
                'psx variable': 'McpTurnAlt',
                'value': 1,
            },
            54: {
                'button type': 'SET',
                'psx variable': 'McpPshAltSel',
                'value': 1,
            },
            # MCP HDG
            52: {
                'button type': 'SET',
                'psx variable': 'McpTurnHdg',
                'value': -1,
            },
            53: {
                'button type': 'SET',
                'psx variable': 'McpTurnHdg',
                'value': 1,
            },
            55: {
                'button type': 'SET',
                'psx variable': 'McpPshHdgSel',
                'value': 1,
            },
            #
            56: {
                'button type': 'SET',
                'psx variable': 'GearLever',
                'value': 1,
            },
            57: {
                'button type': 'SET',
                'psx variable': 'GearLever',
                'value': 3,
            },
            # Left 3-pos switch: A/T, THR, SPD
            42: {
                'button type': 'INCREMENT',
                'psx variable': 'McpAtArm',
                'increment': 1,
                'min': 0, 'max': 1, 'wrap': True,
            },
            43: {
                'button type': 'SET',
                'psx variable': 'McpPshThr',
                'value': 1,
            },
            44: {
                'button type': 'SET',
                'psx variable': 'McpPshSpd',
                'value': 1,
            },
            # Right 3-pos switch: LNAV, VNAV, FLCH
            45: {
                'button type': 'SET',
                'psx variable': 'McpPshLnv',
                'value': 1,
            },
            46: {
                'button type': 'SET',
                'psx variable': 'McpPshVnv',
                'value': 1,
            },
            47: {
                'button type': 'SET',
                'psx variable': 'McpPshFlc',
                'value': 1,
            },
            # Red button below A1/A2 == A/P L on (McpPshCmdL)
            36: {
                'button type': 'SET',
                'psx variable': 'McpPshCmdL',
                'value': 1,
            },
            # A1/A2 == LOC/APP
            34: {
                'button type': 'SET',
                'psx variable': 'McpPshLoc',
                'value': 1,
            },
            35: {
                'button type': 'SET',
                'psx variable': 'McpPshApp',
                'value': 1,
            },
            41: {
                'button type': 'ACTION_RUNWAY_ENTRY',
            },
            40: {
                'button type': 'ACTION_CLEARED_TAKEOFF',
            },
            39: {
                'button type': 'ACTION_EXITED_RUNWAY',
            },
            # Captain ND zoom
            26: {
                'button type': 'INCREMENT',
                'psx variable': 'EcpNdRangeCp',
                'increment': -1,
                'min': 0, 'max': 7, 'wrap': True,
            },
	    27: {
                'button type': 'INCREMENT',
                'psx variable': 'EcpNdRangeCp',
                'increment': 1,
                'min': 0, 'max': 7, 'wrap': True,
            },
	    # COM1 swap
	    0: {
                'button type': 'SET',
                'psx variable': 'SwitchesRcpL',
                'value': 7,
            },
        },
        'button up': {
            # Toe brake (for taxi use)
            15: {
                'button type': 'SET',
                'psx variable': 'ToeBrakeTogg',
                'value': 0,
            },
            48: {
                'button type': 'INCREMENT',
                'psx variable': 'FlapLever',
                'increment': -1,
                'min': 0, 'max': 6,
            },
            49: {
                'button type': 'INCREMENT',
                'psx variable': 'FlapLever',
                'increment': 1,
                'min': 0, 'max': 6,
            },
            56: {
                'button type': 'SET',
                'psx variable': 'GearLever',
                'value': 2,
            },
            57: {
                'button type': 'SET',
                'psx variable': 'GearLever',
                'value': 2,
            },
        },
    },
    'VKBsim Gladiator EVO OT R': {
		'axis motion': {
            0: {
                # Aileron
                'axis type': 'NORMAL',
                'psx variable': 'FltControls',
                'indexes': [1],
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.01, 0.01, 0.0)],  # axis min, axis max, axis replacement value
                'tiller': False,
            },
            1: {
                # Elevator
                'axis type': 'NORMAL',
                'psx variable': 'FltControls',
                'indexes': [0],
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.01, 0.01, 0.0)],  # axis min, axis max, axis replacement value
            },
			5: {
                # Tiller
                'axis type': 'NORMAL',
                'psx variable': 'Tiller',
                'indexes': [0],
				'axis swap': True,
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.01, 0.01, 0.0)],  # axis min, axis max, axis replacement value
            },
        },
        'button down': {
            2: {
                # AP disconnect
                'button type': 'SET',
                'psx variable': 'ApDisc',
				'value': 1,
            },
			15: {
                # Trim nose down
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': -1,
            },
			17: {
                # Trim nose down
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 1,
            },
			20: {
                # Capt F/D toggle
                'button type': 'INCREMENT',
                'psx variable': 'McpFdCp',
				'increment': 1, 'min': 0, 'max': 1, 'wrap': True,
            },
			3: {
                # FO (not Captain as we don't see that button...)
                'button type': 'BIGMOMPSH',
                'psx variable': 'MastWarnFo',
            },
			22: {
				# Towing heading
				'button type': 'TOWING_HEADING',
				'increment': +1,
				'psx variable': 'Towing',
			},
			23: {
				# Towing heading
				'button type': 'TOWING_HEADING',
				'increment': -1,
				'psx variable': 'Towing',
			},
			26: {
				# Towing direction toggle
				'button type': 'TOWING_DIRECTION_TOGGLE',
				'psx variable': 'Towing',
			},
			28: {
				# Towing mode toggle
				'button type': 'TOWING_MODE_TOGGLE',
				'psx variable': 'Towing',
			},
        },
        'button up': {
			15: {
                # Trim nose down
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 0,
            },
			17: {
                # Trim nose down
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 0,
            },
        },
    },
	'TCA YOKE BOEING': {
		'axis motion': {
            0: {
                # Aileron
                'axis type': 'NORMAL',
                'psx variable': 'FltControls',
                'indexes': [1],
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.01, 0.01, 0.0)],  # axis min, axis max, axis replacement value
                'tiller': False,
            },
            1: {
                # Elevator
                'axis type': 'NORMAL',
                'psx variable': 'FltControls',
                'indexes': [0],
                'psx min': -999,
                'psx max': 999,
                'static zones': [(-0.01, 0.01, 0.0)],  # axis min, axis max, axis replacement value
            },
        },
        'button down': {
            0: {
                # AP disconnect (was: 11)
                'button type': 'SET',
                'psx variable': 'ApDisc',
				'value': 1,
            },
			2: {
                # Trim nose down: FIXME: right hand button!
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': -1,
            },
			3: {
                # Trim nose up: FIXME: right hand button!
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 1,
            },
        },
        'button up': {
			2: {
                # Trim nose down: FIXME: right hand button!
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 0,
            },
			3: {
                # Trim nose up: FIXME: right hand button!
                'button type': 'SET',
                'psx variable': 'StabTrimCp',
                'value': 0,
            },
        },
    },
}
